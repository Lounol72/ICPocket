name: Windows Build at Midnight

on:
  schedule:
    - cron: '0 0 * * *'  # Ex√©cution tous les jours √† minuit UTC
  workflow_dispatch:

permissions:
  contents: write
  actions: write

env:
  BUILD_TYPE: Release
  PROJECT_NAME: ICPocket

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Check for today's commits
      id: check_commits
      shell: bash
      run: |
        TODAY=$(date -u +%Y-%m-%d)
        COMMITS_TODAY=$(git log --since="$TODAY 00:00:00" --until="$TODAY 23:59:59" --oneline)
        if [ -n "$COMMITS_TODAY" ]; then
          echo "HAS_COMMITS=true" >> $GITHUB_ENV
          echo "Des commits ont √©t√© trouv√©s aujourd'hui"
        else
          echo "HAS_COMMITS=false" >> $GITHUB_ENV
          echo "Pas de commits aujourd'hui"
        fi

    - name: Setup MSYS2
      if: env.HAS_COMMITS == 'true'
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: |
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-SDL2
          mingw-w64-x86_64-SDL2_image
          mingw-w64-x86_64-SDL2_mixer
          mingw-w64-x86_64-SDL2_ttf
          zip
          make

    - name: Build
      if: env.HAS_COMMITS == 'true'
      shell: msys2 {0}
      run: |
        mkdir -p bin/windows
        
        # Tentative de compilation avec make
        if [ -f "Makefile" ]; then
          make package-windows
        else
          # Compilation directe avec GCC
          gcc -o bin/windows/${{ env.PROJECT_NAME }}.exe \
            main.c src/*.c \
            -I./include \
            -I/mingw64/include/SDL2 \
            -L/mingw64/lib \
            -lmingw32 -lSDL2main -lSDL2 -lSDL2_image -lSDL2_mixer -lSDL2_ttf \
            -mwindows \
            -O2
        fi

    - name: Package
      if: env.HAS_COMMITS == 'true'
      shell: msys2 {0}
      run: |
        # Liste des DLLs requises
        DLLS=(
          "SDL2.dll"
          "SDL2_image.dll"
          "SDL2_mixer.dll"
          "SDL2_ttf.dll"
          "libpng16-16.dll"
          "zlib1.dll"
          "libjpeg-8.dll"
          "libfreetype-6.dll"
        )
        
        # Copie des DLLs
        for dll in "${DLLS[@]}"; do
          if [ -f "/mingw64/bin/$dll" ]; then
            cp -v "/mingw64/bin/$dll" bin/windows/
          else
            echo "Warning: $dll not found"
          fi
        done
        
        # Cr√©ation du script de lancement
        echo "@echo off" > bin/windows/launch.bat
        echo "cd %~dp0" >> bin/windows/launch.bat
        echo "start ${{ env.PROJECT_NAME }}.exe %*" >> bin/windows/launch.bat
        
        # Cr√©ation de l'archive
        zip -r ${{ env.PROJECT_NAME }}-windows.zip bin/windows/ assets/ data/ README.md

    - name: Commit and Push ZIP
      if: env.HAS_COMMITS == 'true'
      shell: bash
      run: |
        # Configurer Git
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        
        # Cr√©er une branche pour le build si elle n'existe pas
        git checkout -b builds
        
        # Ajouter le ZIP au d√©p√¥t
        git add ${{ env.PROJECT_NAME }}-windows.zip
        
        # Cr√©er le commit avec la date
        git commit -m "üì¶ Windows build $(date -u +%Y-%m-%d)"
        
        # Pousser les changements
        git push origin builds --force

    - name: Cleanup
      if: always()
      shell: bash
      run: |
        rm -rf bin/
        rm -f *.zip
