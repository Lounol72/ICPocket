name: Windows Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  BUILD_TYPE: Release
  PROJECT_NAME: ICPocket

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup MSYS2
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: |
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-SDL2
          mingw-w64-x86_64-SDL2_image
          mingw-w64-x86_64-SDL2_mixer
          mingw-w64-x86_64-SDL2_ttf
          zip
          make

    - name: Cache MSYS2 packages
      uses: actions/cache@v4
      with:
        path: C:\msys64\var\cache\pacman\pkg
        key: ${{ runner.os }}-msys2-${{ hashFiles('**/workflow.yml') }}
        restore-keys: |
          ${{ runner.os }}-msys2-

    - name: Build Project
      shell: msys2 {0}
      run: |
        # Créer les répertoires nécessaires
        mkdir -p bin/windows
        
        # Compiler avec make
        make package-windows
        
        # Si make n'est pas configuré, utiliser gcc directement
        if [ $? -ne 0 ]; then
          echo "Compilation directe avec GCC..."
          gcc -o bin/windows/${{ env.PROJECT_NAME }}.exe \
            main.c src/*.c \
            -I./include \
            -I/mingw64/include/SDL2 \
            -L/mingw64/lib \
            -lmingw32 -lSDL2main -lSDL2 -lSDL2_image -lSDL2_mixer -lSDL2_ttf \
            -mwindows \
            -O2
        fi

    - name: Package Dependencies
      shell: msys2 {0}
      run: |
        # Liste des DLLs nécessaires
        DLLS=(
          "SDL2.dll"
          "SDL2_image.dll"
          "SDL2_mixer.dll"
          "SDL2_ttf.dll"
          "libpng16-16.dll"
          "zlib1.dll"
          "libjpeg-8.dll"
          "libfreetype-6.dll"
        )
        
        # Copier les DLLs
        for dll in "${DLLS[@]}"; do
          cp -v "/mingw64/bin/$dll" bin/windows/
        done
        
        # Créer le script de lancement
        cat > bin/windows/launch.bat << EOF
        @echo off
        cd %~dp0
        start ${{ env.PROJECT_NAME }}.exe %*
        EOF
        
        # Créer l'archive
        cd bin
        zip -r ../${{ env.PROJECT_NAME }}-windows.zip windows/ ../assets/ ../data/ ../README.md
        cd ..

    - name: Upload Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PROJECT_NAME }}-Windows
        path: ${{ env.PROJECT_NAME }}-windows.zip
        compression-level: 9

    - name: Create Release
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ env.PROJECT_NAME }}-windows.zip
        tag_name: v${{ github.run_number }}
        name: Release ${{ github.run_number }}
        body: |
          Windows build for ${{ env.PROJECT_NAME }}
          
          **Installation:**
          1. Download and extract the ZIP file
          2. Run `launch.bat` in the extracted folder
          
          Built from commit: ${{ github.sha }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}

    - name: Cleanup
      if: always()
      shell: msys2 {0}
      run: |
        rm -rf bin/
        rm -f *.zip
