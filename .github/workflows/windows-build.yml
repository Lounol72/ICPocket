name: Windows Build

on:
  release:
    types: [published]
  workflow_dispatch:

permissions:
  contents: write
  actions: write

env:
  BUILD_TYPE: Release
  PROJECT_NAME: ICPocket

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        lfs: false

    - name: Setup Git LFS
      run: |
        git lfs install
        git lfs track "*.zip"
        git add .gitattributes

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'

    - name: Download Git LFS
      run: |
        Invoke-WebRequest -Uri "https://github.com/git-lfs/git-lfs/releases/download/v3.4.1/git-lfs-windows-amd64-v3.4.1.zip" -OutFile "git-lfs-windows.zip"
        Expand-Archive -Path "git-lfs-windows.zip" -DestinationPath "bin/windows/git-lfs"

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: |
        dotnet build --configuration ${{ env.BUILD_TYPE }} --no-restore
        dotnet publish --configuration ${{ env.BUILD_TYPE }} --runtime win-x64 --self-contained true -p:PublishSingleFile=true -o bin/windows

    - name: Package
      shell: pwsh
      run: |
        # Cr√©er un fichier d'instructions pour Git LFS
        @"
        # Installation de Git LFS

        Pour utiliser Git LFS avec ce projet:

        1. Ex√©cutez git-lfs/install.bat
        2. Dans votre d√©p√¥t Git, ex√©cutez: git lfs install
        3. Ajoutez les types de fichiers √† suivre: git lfs track "*.zip"
        4. Commit .gitattributes: git add .gitattributes
        5. Puis utilisez git normalement

        Plus d'infos: https://git-lfs.com
        "@ | Out-File -FilePath bin/windows/git-lfs/README.md -Encoding utf8
        
        # Cr√©er un fichier batch de lancement
        @"
        @echo off
        cd %~dp0
        start ${{ env.PROJECT_NAME }}.exe %*
        "@ | Out-File -FilePath bin/windows/launch.bat -Encoding utf8
        
        # Cr√©er l'archive ZIP
        Compress-Archive -Path "bin/windows/*", "assets/*", "data/*", "README.md" -DestinationPath "${{ env.PROJECT_NAME }}-windows.zip" -Force

    - name: Split ZIP if needed
      shell: bash
      run: |
        ZIP_SIZE=$(stat -f %z "${{ env.PROJECT_NAME }}-windows.zip" 2>/dev/null || stat -c %s "${{ env.PROJECT_NAME }}-windows.zip")
        if [ $ZIP_SIZE -gt 95000000 ]; then
          echo "Splitting ZIP file..."
          split -b 95m "${{ env.PROJECT_NAME }}-windows.zip" "${{ env.PROJECT_NAME }}-windows.zip.part"
        fi

    - name: Commit and Push
      shell: bash
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        
        # Ajouter les fichiers divis√©s s'ils existent
        if [ -f "${{ env.PROJECT_NAME }}-windows.zip.partaa" ]; then
          for part in ${{ env.PROJECT_NAME }}-windows.zip.part*; do
            git lfs track "$part"
            git add "$part"
          done
        else
          git lfs track "${{ env.PROJECT_NAME }}-windows.zip"
          git add "${{ env.PROJECT_NAME }}-windows.zip"
        fi
        
        git add .gitattributes
        git commit -m "üì¶ Windows build $(date -u +%Y-%m-%d) avec Git LFS"
        git push origin main --force

    - name: Upload to Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PROJECT_NAME }}-Windows
        path: ${{ env.PROJECT_NAME }}-windows.zip*
        retention-days: 5

    - name: Update latest release
      shell: pwsh
      run: |
        # Obtenir la derni√®re release
        $apiUrl = "https://api.github.com/repos/${{ github.repository }}/releases"
        $headers = @{
          Authorization = "Bearer ${{ secrets.GITHUB_TOKEN }}"
        }
        $releases = Invoke-RestMethod -Uri $apiUrl -Headers $headers -Method Get
        
        if ($releases.Count -gt 0) {
          $latestRelease = $releases[0]
          $releaseId = $latestRelease.id
          
          # T√©l√©charger le ZIP √† la release
          $uploadUrl = "https://uploads.github.com/repos/${{ github.repository }}/releases/$releaseId/assets?name=${{ env.PROJECT_NAME }}-windows.zip"
          Invoke-RestMethod -Uri $uploadUrl -Headers $headers -Method Post -InFile "${{ env.PROJECT_NAME }}-windows.zip" -ContentType "application/octet-stream"
          
          # Mettre √† jour la description de la release pour mentionner Git LFS
          $updateUrl = "https://api.github.com/repos/${{ github.repository }}/releases/$releaseId"
          $body = $latestRelease.body + "`n`n**Mise √† jour Windows du $(Get-Date -Format 'yyyy-MM-dd'):**`n- Ajout du support Git LFS`n- Mise √† jour de la build .NET"
          
          $updateData = @{
            body = $body
          } | ConvertTo-Json
          
          Invoke-RestMethod -Uri $updateUrl -Headers $headers -Method Patch -Body $updateData
        }

    - name: Cleanup
      shell: bash
      run: |
        rm -rf bin/
        rm -f *.zip*